package "TAPL/chap09-simplebool"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn new_lexer(String) -> Lexer

fn next_token(Lexer) -> (Token, Pos, Pos)

fn run(LexEngine, Lexbuf) -> (Int, Array[(Int, Int)])

fn toplevel(Array[(Token, Pos, Pos)], initial_pos? : Pos) -> ((Context) -> (@list.T[Command], Context)!)!ParseError

// Types and methods
type Binding

type Command

type Context

type ErrorWithInfo

type Info

pub(all) struct LexEngine {
  graph : Array[(Int) -> (Int, Array[Array[Int]])]
  end_nodes : Array[(Int, Array[((Int, Int), (Int, Int))])?]
  start_tags : Array[Int]
  code_blocks_n : Int
}
impl LexEngine {
  run(Self, Lexbuf) -> (Int, Array[(Int, Int)])
}

type Lexbuf
impl Lexbuf {
  from_string(String) -> Self
}

pub(all) type Lexer Lexbuf
impl Lexer {
  next_token(Self) -> (Token, Pos, Pos)
}

type NoRuleApplies

pub type! ParseError {
  UnexpectedToken(Token, (Pos, Pos), Array[TokenKind])
  UnexpectedEndOfInput(Pos, Array[TokenKind])
}
impl Show for ParseError

type Pos

type Term

pub(all) enum Token {
  EOF
  ELSE
  FALSE
  IF
  IMPORT
  ISZERO
  LAMBDA
  PRED
  SUCC
  THEN
  TRUE
  UBOOL
  UNAT
  LCID(String)
  INTV(Int)
  STRINGV(String)
  ARROW
  COLON
  DOT
  EQ
  LPAREN
  RPAREN
  SEMI
  USCORE
}
impl Token {
  kind(Self) -> TokenKind
}
impl Show for Token

pub(all) enum TokenKind {
  TK_EOF
  TK_ELSE
  TK_FALSE
  TK_IF
  TK_IMPORT
  TK_ISZERO
  TK_LAMBDA
  TK_PRED
  TK_SUCC
  TK_THEN
  TK_TRUE
  TK_UBOOL
  TK_UNAT
  TK_LCID
  TK_INTV
  TK_STRINGV
  TK_ARROW
  TK_COLON
  TK_DOT
  TK_EQ
  TK_LPAREN
  TK_RPAREN
  TK_SEMI
  TK_USCORE
}
impl Show for TokenKind

type Type
impl Eq for Type

// Type aliases
pub typealias Position = Pos

// Traits


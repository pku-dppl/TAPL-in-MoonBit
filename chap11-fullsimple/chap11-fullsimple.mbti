package "TAPL/chap11-fullsimple"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn new_lexer(String) -> Lexer

fn next_token(Lexer) -> (Token, Pos, Pos)

fn run(LexEngine, Lexbuf) -> (Int, Array[(Int, Int)])

fn toplevel(Array[(Token, Pos, Pos)], initial_pos? : Pos) -> ((Context) -> (@list.T[Command], Context)!)!ParseError

// Types and methods
type Binding

type Command

type Context

type ErrorWithInfo

type Info

pub(all) struct LexEngine {
  graph : Array[(Int) -> (Int, Array[Array[Int]])]
  end_nodes : Array[(Int, Array[((Int, Int), (Int, Int))])?]
  start_tags : Array[Int]
  code_blocks_n : Int
}
impl LexEngine {
  run(Self, Lexbuf) -> (Int, Array[(Int, Int)])
}

type Lexbuf
impl Lexbuf {
  from_string(String) -> Self
}

pub(all) type Lexer Lexbuf
impl Lexer {
  next_token(Self) -> (Token, Pos, Pos)
}

type NoRuleApplies

pub type! ParseError {
  UnexpectedToken(Token, (Pos, Pos), Array[TokenKind])
  UnexpectedEndOfInput(Pos, Array[TokenKind])
}
impl Show for ParseError

type Pos

type Term

pub(all) enum Token {
  EOF
  AS
  CASE
  ELSE
  FALSE
  FIX
  IF
  IMPORT
  IN
  ISZERO
  LAMBDA
  LETREC
  LET
  OF
  PRED
  SUCC
  THEN
  TIMESDOUBLE
  TRUE
  UNIT
  UBOOL
  UDOUBLE
  UNAT
  USTRING
  UUNIT
  LCID(String)
  UCID(String)
  INTV(Int)
  DOUBLEV(Double)
  STRINGV(String)
  DDARROW
  ARROW
  COLON
  COMMA
  DOT
  EQ
  GT
  LCURLY
  LPAREN
  LT
  RCURLY
  RPAREN
  SEMI
  USCORE
  VBAR
}
impl Token {
  kind(Self) -> TokenKind
}
impl Show for Token

pub(all) enum TokenKind {
  TK_EOF
  TK_AS
  TK_CASE
  TK_ELSE
  TK_FALSE
  TK_FIX
  TK_IF
  TK_IMPORT
  TK_IN
  TK_ISZERO
  TK_LAMBDA
  TK_LETREC
  TK_LET
  TK_OF
  TK_PRED
  TK_SUCC
  TK_THEN
  TK_TIMESDOUBLE
  TK_TRUE
  TK_UNIT
  TK_UBOOL
  TK_UDOUBLE
  TK_UNAT
  TK_USTRING
  TK_UUNIT
  TK_LCID
  TK_UCID
  TK_INTV
  TK_DOUBLEV
  TK_STRINGV
  TK_DDARROW
  TK_ARROW
  TK_COLON
  TK_COMMA
  TK_DOT
  TK_EQ
  TK_GT
  TK_LCURLY
  TK_LPAREN
  TK_LT
  TK_RCURLY
  TK_RPAREN
  TK_SEMI
  TK_USCORE
  TK_VBAR
}
impl Show for TokenKind

type Type

// Type aliases
pub typealias Position = Pos

// Traits


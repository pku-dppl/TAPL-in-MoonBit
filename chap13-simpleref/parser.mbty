%derive<Show> Token
%derive<Show> ParseError
%position<Pos>
%start toplevel

%token EOF
%token ELSE         "else"
%token FALSE        "false"
%token FIX          "fix"
%token IF           "if"
%token IMPORT       "import"
%token ISZERO       "iszero"
%token LAMBDA       "lambda"
%token PRED         "pred"
%token REF          "ref"
%token SUCC         "succ"
%token THEN         "then"
%token TRUE         "true"
%token UNIT         "unit"
%token UBOOL        "Bool"
%token UNAT         "Nat"
%token UREF         "Ref"
%token UUNIT        "Unit"
%token<String> LCID
%token<Int> INTV
%token<String> STRINGV
%token ARROW        "->"
%token COLONEQ      ":="
%token BANG         "!"
%token COLON        ":"
%token DOT          "."
%token EQ           "="
%token LPAREN       "("
%token RPAREN       ")"
%token SEMI         ";"
%token USCORE       "_"

%type<ParseToplevel> toplevel
%type<ParseCommand> command
%type<ParseBinder> binder
%type<ParseTerm> term
%type<ParseTerm> app_term
%type<ParseTerm> term_seq
%type<ParseTerm> atom_term
%type<ParseType> type
%type<ParseType> arr_type
%type<ParseType> atom_type

%%

toplevel
  : EOF                                 { fn(ctx) { (Nil, ctx) } }
  | command ";" toplevel                {
      fn(ctx) {
        let (cmd, ctx1) = $1(ctx)
        let (cmds, ctx2) = $3(ctx1)
        (Cons(cmd, cmds), ctx2)
      }
    }
  ;

command
  : "import" STRINGV                    { fn(ctx) { (Import($2), ctx) } }
  | term                                { fn(ctx) { (Eval(FI($startpos, $endpos), $1(ctx)), ctx) } }
  | LCID binder                         { fn(ctx) { (Bind(FI($startpos, $endpos), $1, $2(ctx)), ctx.add_name($1)) } }
  ;

binder
  : "=" term                            { fn(ctx) { TmAbb($2(ctx), None) } }
  | ":" type                            { fn(ctx) { Var($2(ctx)) } }
  ;

term
  : app_term                            { $1 }
  | "if" term "then" term "else" term   { fn(ctx) { If(FI($startpos, $endpos), $2(ctx), $4(ctx), $6(ctx)) } }
  | "lambda" LCID ":" type "." term     {
      fn(ctx) {
        let ctx1 = ctx.add_name($2)
        Abs(FI($startpos, $endpos), $2, $4(ctx), $6(ctx1))
      }
    }
  | "lambda" "_" ":" type "." term      {
      fn(ctx) {
        let ctx1 = ctx.add_name("_")
        Abs(FI($startpos, $endpos), "_", $4(ctx), $6(ctx1))
      }
    }
  | app_term ":=" app_term              { fn(ctx) { Assign(FI($startpos, $endpos), $1(ctx), $3(ctx)) } }
  ;

app_term
  : atom_term                           { $1 }
  | "succ" atom_term                    { fn(ctx) { Succ(FI($startpos, $endpos), $2(ctx)) } }
  | "pred" atom_term                    { fn(ctx) { Pred(FI($startpos, $endpos), $2(ctx)) } }
  | "iszero" atom_term                  { fn(ctx) { IsZero(FI($startpos, $endpos), $2(ctx)) } }
  | app_term atom_term                  { fn(ctx) { App(FI($startpos, $endpos), $1(ctx), $2(ctx)) } }
  | "fix" atom_term                     { fn(ctx) { Fix(FI($startpos, $endpos), $2(ctx)) } }
  | "ref" atom_term                     { fn(ctx) { Ref(FI($startpos, $endpos), $2(ctx)) } }
  | "!" atom_term                       { fn(ctx) { Deref(FI($startpos, $endpos), $2(ctx)) } }
  ;

term_seq
  : term                                { $1 }
  | term ";" term_seq                   {
      fn(ctx) {
        let info = FI($startpos, $endpos)
        App(info, Abs(info, "_", Unit, $3(ctx.add_name("_"))), $1(ctx))
      }
    }
  ;

atom_term
  : "(" term_seq ")"                    { $2 }
  | "true"                              { fn(_) { True(FI($startpos, $endpos)) } }
  | "false"                             { fn(_) { False(FI($startpos, $endpos)) } }
  | INTV                                {
      fn(_) {
        let info = FI($startpos, $endpos)
        loop ($1, Zero(info)) {
          (0, acc) => break acc
          (n, acc) => continue (n - 1, Succ(info, acc))
        }
      }
    }
  | LCID                                { fn(ctx) { Var(FI($startpos, $endpos), ctx.name_to_index($1, FI($startpos, $endpos)), ctx.length()) } }
  | "unit"                              { fn(_) { Unit(FI($startpos, $endpos)) } }
  ;

type
  : arr_type                            { $1 }
  | "Ref" atom_type                     { fn(ctx) { Ref($2(ctx)) } }
  ;

arr_type
  : atom_type                           { $1 }
  | atom_type "->" arr_type             { fn(ctx) { Arr($1(ctx), $3(ctx)) } }
  ;

atom_type
  : "(" type ")"                        { $2 }
  | "Bool"                              { fn(_) { Bool } }
  | "Nat"                               { fn(_) { Nat } }
  | "Unit"                              { fn(_) { Unit } }
  ;

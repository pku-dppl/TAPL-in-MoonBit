%derive<Show> Token
%derive<Show> ParseError
%position<Pos>
%start toplevel

%token EOF
%token AS           "as"
%token CASE         "case"
%token ELSE         "else"
%token FALSE        "false"
%token FIX          "fix"
%token IF           "if"
%token IMPORT       "import"
%token IN           "in"
%token ISZERO       "iszero"
%token LAMBDA       "lambda"
%token LET          "let"
%token OF           "of"
%token PRED         "pred"
%token SUCC         "succ"
%token THEN         "then"
%token TIMESDOUBLE  "timesdouble"
%token TRUE         "true"
%token UNIT         "unit"
%token UALL         "All"
%token UBOOL        "Bool"
%token UDOUBLE      "Double"
%token UNAT         "Nat"
%token USOME        "Some"
%token USTRING      "String"
%token UUNIT        "Unit"
%token<String> LCID
%token<String> UCID
%token<Int> INTV
%token<Double> DOUBLEV
%token<String> STRINGV
%token DDARROW      "==>"
%token ARROW        "->"
%token COLON        ":"
%token COMMA        ","
%token DOT          "."
%token EQ           "="
%token GT           ">"
%token LCURLY       "{"
%token LPAREN       "("
%token LSQUARE      "["
%token LT           "<"
%token RCURLY       "}"
%token RPAREN       ")"
%token RSQUARE      "]"
%token SEMI         ";"
%token STAR         "*"
%token USCORE       "_"
%token VBAR         "|"

%type<ParseToplevel> toplevel
%type<ParseCommand> command
%type<ParseBinder> binder
%type<ParseBinder> ty_binder
%type<ParseTerm> term
%type<ParseCases> cases
%type<ParseCase> case
%type<ParseTerm> app_term
%type<ParseTerm> path_term
%type<ParseTerm> ascribe_term
%type<ParseTerm> term_seq
%type<ParseTerm> atom_term
%type<ParseLabelTerms> label_terms
%type<ParseLabelTerms> nonempty_label_terms
%type<ParseLabelTerm> label_term
%type<ParseType> type
%type<ParseType> arr_type
%type<ParseType> atom_type
%type<ParseLabelTypes> label_types
%type<ParseLabelTypes> nonempty_label_types
%type<ParseLabelType> label_type

%%

toplevel
  : EOF                                           { fn(ctx) { (Nil, ctx) } }
  | command ";" toplevel                          {
      fn(ctx) {
        let (cmd, ctx1) = $1(ctx)
        let (cmds, ctx2) = $3(ctx1)
        (Cons(cmd, cmds), ctx2)
      }
    }
  ;

command
  : "import" STRINGV                              { fn(ctx) { (Import($2), ctx) } }
  | term                                          { fn(ctx) { (Eval(FI($startpos, $endpos), $1(ctx)), ctx) } }
  | LCID binder                                   { fn(ctx) { (Bind(FI($startpos, $endpos), $1, $2(ctx)), ctx.add_name($1)) } }
  | UCID ty_binder                                { fn(ctx) { (Bind(FI($startpos, $endpos), $1, $2(ctx)), ctx.add_name($1)) } }
  | "{" UCID "," LCID "}" "=" term                { fn(ctx) { (SomeBind(FI($startpos, $endpos), $2, $4, $7(ctx)), ctx.add_name($2).add_name($4)) } }
  ;

binder
  : "=" term                                      { fn(ctx) { TmAbb($2(ctx), None) } }
  | ":" type                                      { fn(ctx) { Var($2(ctx)) } }
  ;

ty_binder
  : "=" type                                      { fn(ctx) { TyAbb($2(ctx)) } }
  |                                               { fn(_) { TyVar } }
  ;

term
  : app_term                                      { $1 }
  | "if" term "then" term "else" term             { fn(ctx) { If(FI($startpos, $endpos), $2(ctx), $4(ctx), $6(ctx)) } }
  | "lambda" LCID ":" type "." term               {
      fn(ctx) {
        let ctx1 = ctx.add_name($2)
        Abs(FI($startpos, $endpos), $2, $4(ctx), $6(ctx1))
      }
    }
  | "lambda" "_" ":" type "." term                {
      fn(ctx) {
        let ctx1 = ctx.add_name("_")
        Abs(FI($startpos, $endpos), "_", $4(ctx), $6(ctx1))
      }
    }
  | "case" term "of" cases                        { fn(ctx) { Case(FI($startpos, $endpos), $2(ctx), $4(ctx)) } }
  | "lambda" UCID "." term                        {
      fn(ctx) {
        let ctx1 = ctx.add_name($2)
        TAbs(FI($startpos, $endpos), $2, $4(ctx1))
      }
    }
  | "let" "{" UCID "," LCID "}" "=" term "in" term{
      fn(ctx) {
        let ctx1 = ctx.add_name($3).add_name($5)
        Unpack(FI($startpos, $endpos), $3, $5, $8(ctx), $10(ctx1))
      }
    }
  ;

cases
  : case                                          { fn(ctx) { Cons($1(ctx), Nil) } }
  | case "|" cases                                { fn(ctx) { Cons($1(ctx), $3(ctx)) } }
  ;

case
  : "<" LCID "=" LCID ">" "==>" app_term          {
      fn(ctx) {
        let ctx1 = ctx.add_name($4)
        ($2, ($4, $7(ctx1)))
      }
    }
  ;

app_term
  : path_term                                     { $1 }
  | "succ" path_term                              { fn(ctx) { Succ(FI($startpos, $endpos), $2(ctx)) } }
  | "pred" path_term                              { fn(ctx) { Pred(FI($startpos, $endpos), $2(ctx)) } }
  | "iszero" path_term                            { fn(ctx) { IsZero(FI($startpos, $endpos), $2(ctx)) } }
  | app_term path_term                            { fn(ctx) { App(FI($startpos, $endpos), $1(ctx), $2(ctx)) } }
  | "timesdouble" path_term path_term             { fn(ctx) { Timesdouble(FI($startpos, $endpos), $2(ctx), $3(ctx)) } }
  | "fix" path_term                               { fn(ctx) { Fix(FI($startpos, $endpos), $2(ctx)) } }
  | app_term "[" type "." "]"                         { fn(ctx) { TApp(FI($startpos, $endpos), $1(ctx), $3(ctx)) } }
  ;

path_term
  : ascribe_term                                  { $1 }
  | path_term "." LCID                            { fn(ctx) { Proj(FI($startpos, $endpos), $1(ctx), $3) } }
  | path_term "." INTV                            { fn(ctx) { Proj(FI($startpos, $endpos), $1(ctx), $3.to_string()) } }
  ;

ascribe_term
  : atom_term                                     { $1 }
  | atom_term "as" type                           { fn(ctx) { Ascribe(FI($startpos, $endpos), $1(ctx), $3(ctx)) } }
  ;

term_seq
  : term                                          { $1 }
  | term ";" term_seq                             {
      fn(ctx) {
        let info = FI($startpos, $endpos)
        App(info, Abs(info, "_", Unit, $3(ctx.add_name("_"))), $1(ctx))
      }
    }
  ;

atom_term
  : "(" term_seq ")"                              { $2 }
  | "true"                                        { fn(_) { True(FI($startpos, $endpos)) } }
  | "false"                                       { fn(_) { False(FI($startpos, $endpos)) } }
  | INTV                                          {
      fn(_) {
        let info = FI($startpos, $endpos)
        loop ($1, Zero(info)) {
          (0, acc) => break acc
          (n, acc) => continue (n - 1, Succ(info, acc))
        }
      }
    }
  | LCID                                          { fn(ctx) { Var(FI($startpos, $endpos), ctx.name_to_index($1, FI($startpos, $endpos)), ctx.length()) } }
  | "unit"                                        { fn(_) { Unit(FI($startpos, $endpos)) } }
  | "{" label_terms "}"                           { fn(ctx) { Record(FI($startpos, $endpos), $2(ctx, 1)) } }
  | "<" LCID "=" term ">" "as" type               { fn(ctx) { Tag(FI($startpos, $endpos), $2, $4(ctx), $7(ctx)) } }
  | STRINGV                                       { fn(_) { String(FI($startpos, $endpos), $1) } }
  | DOUBLEV                                       { fn(_) { Double(FI($startpos, $endpos), $1) } }
  | "{" "*" type "," term "}" "as" type           { fn(ctx) { Pack(FI($startpos, $endpos), $3(ctx), $5(ctx), $8(ctx)) } }
  ;

label_terms
  :                                               { fn(_, _) { Nil } }
  | nonempty_label_terms                          { $1 }
  ;

nonempty_label_terms
  : label_term                                    { fn(ctx, i) { Cons($1(ctx, i), Nil) } }
  | label_term "," nonempty_label_terms           { fn(ctx, i) { Cons($1(ctx, i), $3(ctx, i + 1)) } }
  ;

label_term
  : LCID "=" term                                 { fn(ctx, _) { ($1, $3(ctx)) } }
  | term                                          { fn(ctx, i) { (i.to_string(), $1(ctx)) } }
  ;

type
  : arr_type                                      { $1 }
  | "All" UCID "." type                           { fn(ctx) { All($2, $4(ctx.add_name($2))) } }
  ;

arr_type
  : atom_type                                     { $1 }
  | atom_type "->" arr_type                       { fn(ctx) { Arr($1(ctx), $3(ctx)) } }
  ;

atom_type
  : "(" type ")"                                  { $2 }
  | "Bool"                                        { fn(_) { Bool } }
  | "Nat"                                         { fn(_) { Nat } }
  | UCID                                          {
      fn(ctx) {
        if ctx.is_name_bound($1) {
          Var(ctx.name_to_index($1, FI($startpos, $endpos)), ctx.length())
        } else {
          Id($1)
        }
      }
    }
  | "Unit"                                        { fn(_) { Unit } }
  | "{" label_types "}"                           { fn(ctx) { Record($2(ctx, 1)) } }
  | "<" label_types ">"                           { fn(ctx) { Variant($2(ctx, 1)) } }
  | "String"                                      { fn(_) { String } }
  | "Double"                                      { fn(_) { Double } }
  | "{" "Some" UCID "," type "}"                  { fn(ctx) { Some($3, $5(ctx.add_name($3))) } }
  ;

label_types
  :                                               { fn(_, _) { Nil } }
  | nonempty_label_types                          { $1 }
  ;

nonempty_label_types
  : label_type                                    { fn(ctx, i) { Cons($1(ctx, i), Nil) } }
  | label_type "," nonempty_label_types           { fn(ctx, i) { Cons($1(ctx, i), $3(ctx, i + 1)) } }
  ;

label_type
  : LCID ":" type                                 { fn(ctx, _) { ($1, $3(ctx)) } }
  | type                                          { fn(ctx, i) { (i.to_string(), $1(ctx)) } }
  ;

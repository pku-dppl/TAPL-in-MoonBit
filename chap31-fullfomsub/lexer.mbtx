{
pub(all) type Lexer Lexbuf

let pos_fname : Ref[String] = Ref::new("<none>")
let pos_lnum : Ref[Int] = Ref::new(1)
let pos_bol : Ref[Int] = Ref::new(0)

let has_lex_error : Ref[Bool] = Ref::new(false)

fn reset_lex(fname : String) -> Unit {
  pos_fname.val = fname
  pos_lnum.val = 1
  pos_bol.val = 0
  has_lex_error.val = false
}

fn newline(pos : Int) -> Unit {
  pos_lnum.val += 1
  pos_bol.val = pos
}

fn newpos(pos : Int) -> Pos {
  { fname: pos_fname.val, lnum: pos_lnum.val, bol: pos_bol.val, cnum: pos }
}

fn record_lex_error(msg : String, start : Pos, end : Pos) -> Unit {
  println("Error:\{FI(start, end)} \{msg}")
  has_lex_error.val = true
}

let comment_depth : Ref[Int] = Ref::new(0)

let string_builder : StringBuilder = StringBuilder::new()
let string_start : Ref[Int] = Ref::new(0)
}

rule token() -> (Token, Pos, Pos) {
  parse {
    ('\r'* '\n') as t => { newline($endpos(t)); token(lexbuf) }
    [' ' '\t']+ => { token(lexbuf) }
    "*/" as t => { record_lex_error("unmatched end of comment", newpos($startpos(t)), newpos($endpos(t))); token(lexbuf) }
    "/*" => { comment_depth.val = 1; comment(lexbuf); token(lexbuf) }
    (['0'-'9']+ '.' ['0'-'9']+) as t => {
      try {
        (DOUBLEV(@strconv.parse_double(t)), newpos($startpos(t)), newpos($endpos(t)))
      } catch {
        StrConvError(_) => {
          record_lex_error("double literal invalid", newpos($startpos(t)), newpos($endpos(t)))
          token(lexbuf)
        }
      }
    }
    ['0'-'9']+ as t => {
      try {
        (INTV(@strconv.parse_int(t)), newpos($startpos(t)), newpos($endpos(t)))
      } catch {
        StrConvError(_) => {
          record_lex_error("int literal invalid", newpos($startpos(t)), newpos($endpos(t)))
          token(lexbuf)
        }
      }
    }
    "as" as t => { (AS, newpos($startpos(t)), newpos($endpos(t))) }
    "case" as t => { (CASE, newpos($startpos(t)), newpos($endpos(t))) }
    "else" as t => { (ELSE, newpos($startpos(t)), newpos($endpos(t))) }
    "false" as t => { (FALSE, newpos($startpos(t)), newpos($endpos(t))) }
    "fix" as t => { (FIX, newpos($startpos(t)), newpos($endpos(t))) }
    "if" as t => { (IF, newpos($startpos(t)), newpos($endpos(t))) }
    "import" as t => { (IMPORT, newpos($startpos(t)), newpos($endpos(t))) }
    "in" as t => { (IN, newpos($startpos(t)), newpos($endpos(t))) }
    "iszero" as t => { (ISZERO, newpos($startpos(t)), newpos($endpos(t))) }
    "lambda" as t => { (LAMBDA, newpos($startpos(t)), newpos($endpos(t))) }
    "let" as t => { (LET, newpos($startpos(t)), newpos($endpos(t))) }
    "of" as t => { (OF, newpos($startpos(t)), newpos($endpos(t))) }
    "pred" as t => { (PRED, newpos($startpos(t)), newpos($endpos(t))) }
    "succ" as t => { (SUCC, newpos($startpos(t)), newpos($endpos(t))) }
    "then" as t => { (THEN, newpos($startpos(t)), newpos($endpos(t))) }
    "timesdouble" as t => { (TIMESDOUBLE, newpos($startpos(t)), newpos($endpos(t))) }
    "true" as t => { (TRUE, newpos($startpos(t)), newpos($endpos(t))) }
    "unit" as t => { (UNIT, newpos($startpos(t)), newpos($endpos(t))) }
    "All" as t => { (UALL, newpos($startpos(t)), newpos($endpos(t))) }
    "Bool" as t => { (UBOOL, newpos($startpos(t)), newpos($endpos(t))) }
    "Double" as t => { (UDOUBLE, newpos($startpos(t)), newpos($endpos(t))) }
    "Nat" as t => { (UNAT, newpos($startpos(t)), newpos($endpos(t))) }
    "Some" as t => { (USOME, newpos($startpos(t)), newpos($endpos(t))) }
    "String" as t => { (USTRING, newpos($startpos(t)), newpos($endpos(t))) }
    "Top" as t => { (UTOP, newpos($startpos(t)), newpos($endpos(t))) }
    "Unit" as t => { (UUNIT, newpos($startpos(t)), newpos($endpos(t))) }
    (['a'-'z' '_'] ['A'-'Z' 'a'-'z' '_' '0'-'9' '\'']*) as t => { (LCID(t), newpos($startpos(t)), newpos($endpos(t))) }
    (['A'-'Z'] ['A'-'Z' 'a'-'z' '_' '0'-'9' '\'']*) as t => { (UCID(t), newpos($startpos(t)), newpos($endpos(t))) }
    "==>" as t => { (DDARROW, newpos($startpos(t)), newpos($endpos(t))) }
    "->" as t => { (ARROW, newpos($startpos(t)), newpos($endpos(t))) }
    "::" as t => { (COLONCOLON, newpos($startpos(t)), newpos($endpos(t))) }
    "=>" as t => { (DARROW, newpos($startpos(t)), newpos($endpos(t))) }
    "<:" as t => { (LEQ, newpos($startpos(t)), newpos($endpos(t))) }
    ":" as t => { (COLON, newpos($startpos(t)), newpos($endpos(t))) }
    "," as t => { (COMMA, newpos($startpos(t)), newpos($endpos(t))) }
    "." as t => { (DOT, newpos($startpos(t)), newpos($endpos(t))) }
    "=" as t => { (EQ, newpos($startpos(t)), newpos($endpos(t))) }
    ">" as t => { (GT, newpos($startpos(t)), newpos($endpos(t))) }
    "{" as t => { (LCURLY, newpos($startpos(t)), newpos($endpos(t))) }
    "(" as t => { (LPAREN, newpos($startpos(t)), newpos($endpos(t))) }
    "[" as t => { (LSQUARE, newpos($startpos(t)), newpos($endpos(t))) }
    "<" as t => { (LT, newpos($startpos(t)), newpos($endpos(t))) }
    "}" as t => { (RCURLY, newpos($startpos(t)), newpos($endpos(t))) }
    ")" as t => { (RPAREN, newpos($startpos(t)), newpos($endpos(t))) }
    "]" as t => { (RSQUARE, newpos($startpos(t)), newpos($endpos(t))) }
    ";" as t => { (SEMI, newpos($startpos(t)), newpos($endpos(t))) }
    "*" as t => { (STAR, newpos($startpos(t)), newpos($endpos(t))) }
    "_" as t => { (USCORE, newpos($startpos(t)), newpos($endpos(t))) }
    "|" as t => { (VBAR, newpos($startpos(t)), newpos($endpos(t))) }
    '"' as t => { string_builder.reset(); string_start.val = $startpos(t); string(lexbuf) }
    eof as t => { (EOF, newpos($startpos(t)), newpos($endpos(t))) }
    _ as t => {
      record_lex_error("unrecognized token", newpos($startpos(t)), newpos($endpos(t)))
      token(lexbuf)
    }
  }
}

rule comment() -> Unit {
  parse {
    "/*" => { comment_depth.val += 1; comment(lexbuf) }
    "*/" => { comment_depth.val -= 1; if comment_depth.val > 0 { comment(lexbuf) } }
    eof as t => { record_lex_error("comment not terminated", newpos($startpos(t)), newpos($endpos(t))) }
    [^ '\n'] => { comment(lexbuf) }
    '\n' as t => { newline($endpos(t)); comment(lexbuf) }
  }
}

rule string() -> (Token, Pos, Pos) {
  parse {
    '"' as t => { (STRINGV(string_builder.to_string()), newpos(string_start.val), newpos($endpos(t))) }
    '\\' => { string_builder.write_string("\\\\"); string(lexbuf) }
    '\n' as t => { string_builder.write_string("\n"); newline($endpos(t)); string(lexbuf) }
    eof as t => {
      record_lex_error("string not terminated", newpos($startpos(t)), newpos($endpos(t)))
      (EOF, newpos($startpos(t)), newpos($endpos(t)))
    }
    _ as t => { string_builder.write_string(t); string(lexbuf) }
  }
}

{
pub fn new_lexer(input : String) -> Lexer {
  Lexbuf::from_string(input)
}

pub fn next_token(self : Lexer) -> (Token, Pos, Pos) {
  token(self._)
}
}
